package javamas;

import java.awt.event.ActionListener;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import javamas.gui.CheckClass;
import javamas.gui.editor.JavaEditor;
import javamas.gui.JarBuilder;
import javamas.gui.MiniInternalFrame;
import javamas.gui.ShowDocumentation;
import javamas.kernel.AbstractAgent;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.ToolTipManager;
import javax.swing.border.TitledBorder;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLFrameHyperlinkEvent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author  monet
 * @version
 */
public class Jamas extends JFrame implements ActionListener {

	private JMenuBar jMenuBar1;
	private JMenu jMenu1;
	private JScrollPane jScrollPane1;
	private JTextArea debug_text_area;
	private JSplitPane jSplitPane1;
	private JTree FolderTree;
	private JDesktopPane desktop_pane_agent;
	private File agents;
	private JEditorPane html;
	private boolean run_exec = false;
	private JMenuItem doc, info;

	/**
	 * 
	 */
	public Jamas() {
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents() {
		this.setTitle("JavaMAS Java Multi-Agents System");
		jMenuBar1 = new JMenuBar();
		jMenu1 = new JMenu();
		doc = new JMenuItem("Documentation");
		doc.addActionListener(this);
		jMenu1.add(doc);
		info = new JMenuItem("About");
		info.addActionListener(this);
		jMenu1.add(info);

		jScrollPane1 = new JScrollPane();
		debug_text_area = new JTextArea();
		jSplitPane1 = new JSplitPane();
		FolderTree = new JTree();
		desktop_pane_agent = new JDesktopPane();
		debug_text_area.setEditable(false);
		debug_text_area.setBackground(java.awt.Color.white);
		jMenu1.setText("JaMas");
		jMenuBar1.add(jMenu1);
		this.createTree();

		this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new java.awt.event.WindowAdapter() {

			@Override
			public void windowClosing(java.awt.event.WindowEvent evt) {
				exitForm(evt);
			}
		});

		jScrollPane1.setViewportBorder(new TitledBorder("Debug"));
		jScrollPane1.setMinimumSize(new java.awt.Dimension(32, 85));
		jScrollPane1.setPreferredSize(new java.awt.Dimension(13, 85));
		jScrollPane1.setViewportView(debug_text_area);

		getContentPane().add(jScrollPane1, java.awt.BorderLayout.SOUTH);

		jSplitPane1.setLeftComponent(FolderTree);

		jSplitPane1.setRightComponent(desktop_pane_agent);

		getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);
		Console outStream = new Console();
		PrintStream ps = new PrintStream(outStream, true);
		System.setErr(ps);
		System.setOut(ps);
		setJMenuBar(jMenuBar1);
		this.setSize(java.awt.Toolkit.getDefaultToolkit().getScreenSize().width, java.awt.Toolkit.getDefaultToolkit().getScreenSize().height - 50);
		this.setLocation(0, 25);
	}

	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt) {
		if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null, "Really quit JAMAS", "Quit", JOptionPane.YES_NO_OPTION)) {
			System.exit(0);
		}
	}

	@Override
	public void actionPerformed(java.awt.event.ActionEvent e) {
		if (e.getSource().equals(info)) {
			JOptionPane.showMessageDialog(this, (Object) "<HTML><CENTER>JaMas 0.4 developped by<BR>Guillaume Monet<BR></CENTER></HTML>", "Info About JaMas", JOptionPane.INFORMATION_MESSAGE);
		}
		if (e.getSource().equals(doc)) {
			new ShowDocumentation();
		}

	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		new Jamas().setVisible(true);
	}

	/**
	 * 
	 */
	public void createTree() {
		agents = new File("agents");
		File[] files = agents.listFiles();
		FolderTree.removeAll();
		FolderTree = new JTree(addNode(files, "agents"));
		FolderTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		ToolTipManager.sharedInstance().registerComponent(FolderTree);
		FolderTree.setCellRenderer(new TreeRenderer());
		final MenuPopUp pop = new MenuPopUp();
		FolderTree.add(pop);
		java.awt.event.MouseListener ml = new java.awt.event.MouseAdapter() {

			public void mousePressed(java.awt.event.MouseEvent e) {
				TreePath selPath = FolderTree.getPathForLocation(e.getX(), e.getY());
				if (e.getModifiers() == e.BUTTON1_MASK) {
					int selRow = FolderTree.getRowForLocation(e.getX(), e.getY());

					if (selRow != -1) {
						if (e.getClickCount() == 2) {
							checkFiles(selPath);
						}
					}
				} else {
					if (FolderTree.getRowForLocation(e.getX(), e.getY()) != -1 && ((DefaultMutableTreeNode) FolderTree.getPathForLocation(e.getX(), e.getY()).getLastPathComponent()).isLeaf()) {
						FolderTree.setSelectionRow(FolderTree.getRowForLocation(e.getX(), e.getY()));
						pop.show(e.getComponent(), e.getX(), e.getY(), selPath);
					} else {
						if (FolderTree.getRowForLocation(e.getX(), e.getY()) != -1 && ((DefaultMutableTreeNode) FolderTree.getPathForLocation(e.getX(), e.getY()).getLastPathComponent()).isRoot()) {
							FolderTree.setSelectionRow(FolderTree.getRowForLocation(e.getX(), e.getY()));
							(new PopCreate()).show(e.getComponent(), e.getX(), e.getY());

						} else {
							createTree();
						}
					}
				}


			}
		};
		FolderTree.addMouseListener(ml);
		jSplitPane1.setLeftComponent(FolderTree);
	}

	/**
	 * 
	 * @param files
	 * @param name
	 * @return
	 */
	public DefaultMutableTreeNode addNode(File[] files, String name) {

		DefaultMutableTreeNode temp = new DefaultMutableTreeNode(name);
		try {
			for (int inc = 0; inc < files.length; inc++) {
				if (!files[inc].isDirectory()) {
					try {
						if (files[inc].getName().toLowerCase().endsWith(".class") && files[inc].getName().indexOf('$') == -1 || (files[inc].getName().toLowerCase().endsWith(".html") || files[inc].getName().toLowerCase().endsWith(".htm")) && files[inc].getName().indexOf('$') == -1 || files[inc].getName().toLowerCase().endsWith(".java")) {
							DefaultMutableTreeNode child = new DefaultMutableTreeNode(files[inc].getName());
							temp.add(child);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else {
					temp.add(addNode(files[inc].listFiles(), files[inc].getName()));
				}
			}
		} catch (Exception e) {
		}
		return temp;
	}

	/**
	 * 
	 * @param tr
	 */
	public void checkFiles(TreePath tr) {

		String file = "/";
		String cl = agents.getPath();

		for (int inc = 1; inc < tr.getPathCount(); inc++) {
			file += "/" + tr.getPathComponent(inc);
		}

		for (int inc = 1; inc < tr.getPathCount(); inc++) {
			cl += "." + tr.getPathComponent(inc);
		}

		if (file.toLowerCase().endsWith(".html") || file.toLowerCase().endsWith(".htm")) {
			JScrollPane scroller = new JScrollPane();
			try {
				File theFile = new File(agents.getAbsolutePath() + file);
				html = new JEditorPane(theFile.toURL());
				html.setEditable(false);
				html.addHyperlinkListener(createHyperLinkListener());
				JViewport vp = scroller.getViewport();
				vp.add(html);
			} catch (java.net.MalformedURLException ex) {
				System.out.println("Malformed URL: " + ex);
			} catch (IOException ex) {
				System.out.println("IOException: " + ex);
			} catch (Exception ex) {
				System.out.println("Erreur lors du chargement de la page d'aide" + ex);
			}

			JFrame splashScreen = new JFrame();
			splashScreen.setSize(640, 480);
			splashScreen.setTitle(file);
			splashScreen.getContentPane().add(scroller);
			splashScreen.setVisible(true);
		}

		if (file.toLowerCase().endsWith(".class")) {
			(new Launcher(cl)).start();
		}
	}

	/**
	 * 
	 * @return
	 */
	public HyperlinkListener createHyperLinkListener() {
		return new HyperlinkListener() {

			public void hyperlinkUpdate(HyperlinkEvent e) {
				if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
					if (e instanceof HTMLFrameHyperlinkEvent) {
						((HTMLDocument) html.getDocument()).processHTMLFrameHyperlinkEvent((HTMLFrameHyperlinkEvent) e);
					} else {
						try {
							html.setPage(e.getURL());
						} catch (IOException ioe) {
							System.out.println("IOE: " + ioe);
						}
					}
				}
			}
		};
	}

	class TreeRenderer extends DefaultTreeCellRenderer {

		public TreeRenderer() {
		}

		/**
		 * @param tree
		 * @param value
		 * @param sel
		 * @param expanded
		 * @param leaf
		 * @param row
		 * @param hasFocus
		 * @return  */
		public java.awt.Component getTreeCellRendererComponent(
				JTree tree,
				Object value,
				boolean sel,
				boolean expanded,
				boolean leaf,
				int row,
				boolean hasFocus) {

			super.getTreeCellRendererComponent(
					tree, value, sel,
					expanded, leaf, row,
					hasFocus);
			if (value.toString().endsWith(".class")) {
				ImageIcon i = new ImageIcon("kernel/agent.jpg");
				i.setImage(i.getImage().getScaledInstance(15, 20, 1));
				setIcon(i);
				setToolTipText("An agent");
			} else {
				if (value.toString().toLowerCase().endsWith(".html") || value.toString().toLowerCase().endsWith(".htm")) {
					ImageIcon i = new ImageIcon("kernel/html.gif");
					i.setImage(i.getImage().getScaledInstance(15, 20, 1));
					setIcon(i);
					setToolTipText("HTML files");
				} else {
					if (value.toString().endsWith(".java")) {
						ImageIcon i = new ImageIcon("kernel/javalogo.gif");
						i.setImage(i.getImage().getScaledInstance(15, 20, 1));
						setIcon(i);
						setToolTipText("Java source");
					} else {
						setToolTipText("Directory");
					}
				}
			}
			return this;
		}
	}

	class MenuPopUp extends JPopupMenu implements java.awt.event.ActionListener {

		private JMenuItem laun = new JMenuItem("Launch");
		private JMenuItem edit = new JMenuItem("Edit");
		private JMenuItem exec = new JMenuItem("Create AutoExec");
		private JMenuItem doc = new JMenuItem("Generate MiniDoc");
		private TreePath tr = null;

		public MenuPopUp() {
			super();
			laun.addActionListener(this);
			edit.addActionListener(this);
			exec.addActionListener(this);
			doc.addActionListener(this);


			this.add(laun);
			this.add(edit);
			this.add(exec);
			this.add(doc);

		}

		/**
		 * @param invoker
		 * @param x
		 * @param y
		 * @param p  */
		public void show(java.awt.Component invoker, int x, int y, TreePath p) {
			tr = p;
			String type = "";
			if (((DefaultMutableTreeNode) p.getLastPathComponent()).toString().toLowerCase().endsWith(".class")) {
				type = ".class";
			}

			if (((DefaultMutableTreeNode) p.getLastPathComponent()).toString().toLowerCase().endsWith(".htm") || ((DefaultMutableTreeNode) p.getLastPathComponent()).toString().toLowerCase().endsWith(".html")) {
				type = ".html";
			}

			if (((DefaultMutableTreeNode) p.getLastPathComponent()).toString().toLowerCase().endsWith(".java")) {
				type = ".java";
			}

			if (type.equalsIgnoreCase(".class")) {
				laun.setEnabled(true);
				edit.setEnabled(false);
				if (!run_exec) {
					exec.setEnabled(true);
				} else {
					exec.setEnabled(false);
				}
				doc.setEnabled(true);

			}
			if (type.equalsIgnoreCase(".java")) {
				laun.setEnabled(false);
				edit.setEnabled(true);
				exec.setEnabled(false);
				doc.setEnabled(false);

			}
			if (type.equalsIgnoreCase(".html")) {
				laun.setEnabled(true);
				edit.setEnabled(false);
				exec.setEnabled(false);
				doc.setEnabled(false);

			}
			this.show(invoker, x, y);
		}

		/**
		 * @param e  */
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource().equals(laun)) {
				checkFiles(tr);
			}
			if (e.getSource().equals(edit)) {
				String file = "";
				for (int inc = 1; inc < tr.getPathCount(); inc++) {
					file += "/" + tr.getPathComponent(inc);
				}
				new JavaEditor(agents.getAbsolutePath() + file);
			}
			if (e.getSource().equals(exec)) {
				String file = "/";
				for (int inc = 1; inc < tr.getPathCount(); inc++) {
					file += "/" + tr.getPathComponent(inc);
				}
				System.out.println("Waiting creation");
				this.setVisible(false);
				run_exec = true;
				(new GenerateExec(agents.getAbsolutePath() + file.replaceAll(".class", ""))).start();

			}

			if (e.getSource().equals(doc)) {
				String file = "/";
				String cl = agents.getPath();

				for (int inc = 1; inc < tr.getPathCount() - 1; inc++) {
					file += "/" + tr.getPathComponent(inc);
				}

				for (int inc = 1; inc < tr.getPathCount(); inc++) {
					cl += "." + tr.getPathComponent(inc);
				}
				try {
					new CheckClass(Class.forName(cl.replaceAll(".class", "")), agents.getAbsolutePath() + file);
					this.setVisible(false);
					createTree();
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			}
		}
	}

	class PopCreate extends JPopupMenu implements java.awt.event.ActionListener {

		private JMenuItem laun = new JMenuItem("Create Agent");
		private JMenuItem ref = new JMenuItem("Refresh tree");

		public PopCreate() {
			super();
			laun.addActionListener(this);
			this.add(laun);
			ref.addActionListener(this);
			this.add(ref);
		}

		/**
		 * @param e  */
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource().equals(laun)) {
				new JavaEditor();
				this.setVisible(false);
			}
			if (e.getSource().equals(ref)) {
				createTree();
			}
		}
	}

	private class Launcher extends Thread {

		private Class clprog;

		/**
		 * @param adr  */
		public Launcher(String adr) {
			try {
				clprog = Class.forName(adr.replaceAll(".class", ""));
			} catch (Exception exp) {
				exp.printStackTrace();
			}
		}

		public void run() {
			try {
				Object instance = clprog.newInstance();
				AbstractAgent agt = ((AbstractAgent) instance);
				MiniInternalFrame frame = new MiniInternalFrame(((AbstractAgent) instance).getAgentAddress().getPublic_name(), agt);
				desktop_pane_agent.add((JInternalFrame) frame.getFrame());
				((JInternalFrame) frame.getFrame()).setVisible(true);
				((JInternalFrame) frame.getFrame()).moveToFront();
				try {
					agt.setGUI(frame);
					agt.initGUI();
					agt.activate();
					agt.live();
					agt.end();
					agt.kill();
					agt = null;

				} catch (Exception e) {
					e.printStackTrace();
				}
			} catch (java.lang.InstantiationException e) {
				System.out.println("Error during start of " + clprog.getName() + "\nMight not be an agent\nOr can requier argument(s)");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	class Console extends ByteArrayOutputStream {

		public Console() {
		}

		public void flush() {
			debug_text_area.append(this.toString());
			this.reset();
			debug_text_area.setCaretPosition(debug_text_area.getDocument().getLength());
		}
	}

	class GenerateExec extends Thread {

		private String str = "";

		/**
		 * @param str  */
		public GenerateExec(String str) {
			this.str = str;

		}

		public void run() {
			new JarBuilder(str);
			System.out.println("AutoExec created");
			run_exec = false;
		}
	}
}
